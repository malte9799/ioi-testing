name: Export and Create Prerelease

on:
  workflow_dispatch:
  #   push:
  #     branches: [main, master]

permissions:
  contents: write

jobs:
  export-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install 7-Zip
        run: |
          choco install 7zip -y
        shell: pwsh

      - name: Run export script
        run: |
          cd helper/export
          call run.bat
        shell: cmd

      - name: Check if ioi-testing.zip was created
        run: |
          if (Test-Path "ioi-testing.zip") {
            Write-Host "ioi-testing.zip found successfully"
            $size = (Get-Item "ioi-testing.zip").Length
            Write-Host "File size: $([math]::Round($size/1KB, 2)) KB"
          } else {
            Write-Host "Error: ioi-testing.zip not found"
            Write-Host "Contents of root directory:"
            Get-ChildItem -Name
            Write-Host "Contents of helper/export directory:"
            Get-ChildItem . -Name
            exit 1
          }
        shell: pwsh

      - name: Check for existing prerelease
        id: check_prerelease
        run: |
          $releases = gh release list --json tagName,isPrerelease | ConvertFrom-Json
          $prerelease = $releases | Where-Object { $_.isPrerelease -eq $true } | Select-Object -First 1

          if ($prerelease) {
            echo "existing_tag=$($prerelease.tagName)" >> $env:GITHUB_OUTPUT
            echo "has_prerelease=true" >> $env:GITHUB_OUTPUT
            echo "Found existing prerelease: $($prerelease.tagName)"
          } else {
            echo "has_prerelease=false" >> $env:GITHUB_OUTPUT
            echo "existing_tag=v0.0.1-prerelease" >> $env:GITHUB_OUTPUT
            echo "No existing prerelease found"
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete existing prerelease if exists
        if: steps.check_prerelease.outputs.has_prerelease == 'true'
        run: |
          gh release delete ${{ steps.check_prerelease.outputs.existing_tag }} --yes
          git push --delete origin ${{ steps.check_prerelease.outputs.existing_tag }} 2>$null || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/recreate prerelease tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.check_prerelease.outputs.existing_tag }}
          git push origin ${{ steps.check_prerelease.outputs.existing_tag }}

      - name: Create prerelease
        run: |
          gh release create ${{ steps.check_prerelease.outputs.existing_tag }} `
            --title "${{ steps.check_prerelease.outputs.existing_tag }} (Prerelease)" `
            --notes "Automated prerelease created from commit ${{ github.sha }}

          ## Latest Export
          - Updated build from latest changes
          - Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')

          This is a prerelease version." `
            --prerelease `
            ./ioi-testing.zip
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
